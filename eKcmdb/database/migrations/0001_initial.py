# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-03-14 15:22
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='姓名')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False, verbose_name='管理员')),
                ('token', models.CharField(blank=True, max_length=128, null=True, verbose_name='用户token')),
                ('user_key', models.CharField(default='NPTtrRP3UM5TR6WxAEm6k4HkdKAhjFN7SQbvuX4dVbB4FEyNcUuGGXBEctCQ5YTngu5vhU6M3uehtjHQskmt4s6QyNqm9CXDtYMP', max_length=100, verbose_name='用户key')),
                ('department', models.SmallIntegerField(choices=[(0, '聚宝汇'), (1, '支付')], default=0, verbose_name='部门')),
                ('tel', models.CharField(blank=True, max_length=32, null=True, verbose_name='座机')),
                ('mobile', models.CharField(max_length=32, verbose_name='手机')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '用户',
                'verbose_name': '用户',
            },
        ),
        migrations.CreateModel(
            name='BindHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '主机与系统账号绑定',
                'verbose_name': '主机与系统账号绑定',
            },
        ),
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='业务线')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '业务线',
                'verbose_name': '业务线',
            },
        ),
        migrations.CreateModel(
            name='CheckCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(db_index=True, max_length=32)),
                ('code', models.CharField(max_length=12)),
                ('times', models.IntegerField(default=1)),
                ('ctime', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True, verbose_name='发布名称')),
                ('version', models.CharField(max_length=32, verbose_name='版本号')),
                ('content', models.TextField(verbose_name='发布内容')),
                ('commit_time', models.DateTimeField(auto_now_add=True, verbose_name='提交时间')),
                ('hd_mome', models.TextField(verbose_name='灰度备注')),
                ('hd_time', models.DateTimeField(auto_now_add=True, verbose_name='灰度测试完成时间')),
                ('production_mome', models.TextField(verbose_name='生产备注')),
                ('production_time', models.DateTimeField(auto_now_add=True, verbose_name='生产测试完成时间')),
                ('approve_time', models.DateTimeField(blank=True, null=True, verbose_name='代码合并时间')),
                ('status', models.SmallIntegerField(choices=[(0, '等待发布中'), (1, '等待测试中'), (2, '已完成'), (3, '测试失败'), (4, '未知')], default=4, verbose_name='发布状态')),
                ('steps', models.SmallIntegerField(choices=[(1, '发布申请'), (2, '灰度发布'), (3, '灰度测试'), (4, '生产发布'), (5, '生产测试'), (6, '代码合并')], default=1, verbose_name='当前步骤')),
            ],
        ),
        migrations.CreateModel(
            name='CodeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log', models.TextField(verbose_name='log')),
            ],
            options={
                'verbose_name_plural': '日志',
                'verbose_name': '日志',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU型号')),
                ('cpu_count', models.SmallIntegerField(verbose_name='物理CPU个数')),
                ('cpu_core_count', models.SmallIntegerField(verbose_name='CPU核数')),
            ],
            options={
                'verbose_name_plural': 'CPU',
                'verbose_name': 'CPU',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽位')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='磁盘型号')),
                ('capacity', models.FloatField(verbose_name='磁盘容量GB')),
                ('iface_type', models.CharField(choices=[('SATA', 'SATA'), ('SAS', 'SAS'), ('SCSI', 'SCSI'), ('SSD', 'SSD')], default='SAS', max_length=64, verbose_name='接口类型')),
                ('update_date', models.DateTimeField(blank=True, null=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name_plural': '硬盘',
                'verbose_name': '硬盘',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('memo', models.TextField()),
            ],
            options={
                'verbose_name_plural': '环境',
                'verbose_name': '环境',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(unique=True, verbose_name='IP')),
                ('hostname', models.CharField(blank=True, max_length=64, null=True, verbose_name='主机名')),
                ('sn', models.CharField(blank=True, max_length=64, null=True, verbose_name='sn')),
                ('number', models.CharField(blank=True, max_length=64, null=True, verbose_name='资产编号')),
                ('qs', models.CharField(blank=True, max_length=64, null=True, verbose_name='快速服务代码')),
                ('asset_name', models.SmallIntegerField(choices=[(0, 'Dell R510'), (1, 'Dell R620'), (2, 'Dell R710'), (3, 'Dell R720'), (4, 'Dell R720xd')], default=3, verbose_name='设备名称')),
                ('raid_type', models.SmallIntegerField(choices=[(0, 'None'), (1, 'RADI 0'), (2, 'RADI 1'), (3, 'RADI 5'), (4, 'RADI 10')], default=0, verbose_name='RAID类型')),
                ('management_ip', models.GenericIPAddressField(blank=True, null=True, unique=True, verbose_name='管理IP')),
                ('cabinet', models.CharField(blank=True, max_length=32, null=True, verbose_name='机柜号')),
                ('host_cabinet_id', models.CharField(blank=True, max_length=32, null=True, verbose_name='机器位置')),
                ('status', models.SmallIntegerField(choices=[(0, '在线'), (1, '下线'), (2, '故障'), (3, '备用'), (4, '未知')], default=0, verbose_name='设备状态')),
                ('is_virtual', models.BooleanField(default=False, verbose_name='虚拟机')),
                ('admin', models.CharField(blank=True, max_length=32, null=True, verbose_name='资产管理员')),
                ('buy_date', models.DateField(blank=True, null=True, verbose_name='购买时间')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_date', models.DateTimeField(auto_now=True, verbose_name='最近修改时间')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '主机',
                'verbose_name': '主机',
            },
        ),
        migrations.CreateModel(
            name='HostGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('bind_hosts', models.ManyToManyField(blank=True, to='database.BindHost')),
                ('user', models.ManyToManyField(blank=True, related_name='g', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '主机组',
                'verbose_name': '主机组',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='IDC名称')),
                ('staff', models.CharField(max_length=32, verbose_name='客服')),
                ('phone', models.CharField(max_length=32, verbose_name='IDC联系电话')),
                ('address', models.CharField(max_length=128, verbose_name='IDC地址')),
                ('memo', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': 'IDC',
                'verbose_name': 'IDC',
            },
        ),
        migrations.CreateModel(
            name='Manufactory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='制造厂商')),
                ('staff', models.CharField(blank=True, max_length=32, null=True, verbose_name='售后联系方式')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '制造厂商',
                'verbose_name': '制造厂商',
            },
        ),
        migrations.CreateModel(
            name='NetDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(max_length=64, verbose_name='sn')),
                ('ip', models.GenericIPAddressField(unique=True, verbose_name='IP')),
                ('number', models.CharField(blank=True, max_length=32, null=True, verbose_name='资产编号')),
                ('qs', models.CharField(blank=True, max_length=64, null=True, verbose_name='快速服务代码')),
                ('asset_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='设备名称')),
                ('asset_type', models.SmallIntegerField(choices=[(0, '交换机'), (1, '路由器'), (2, '防火墙'), (3, '安全设备')], default=0, verbose_name='设备类型')),
                ('cabinet', models.CharField(blank=True, max_length=32, null=True, verbose_name='机柜号')),
                ('device_cabinet_id', models.CharField(blank=True, max_length=32, null=True, verbose_name='机器位置')),
                ('status', models.SmallIntegerField(choices=[(0, '在线'), (1, '下线'), (2, '故障'), (3, '备用'), (4, '未知')], default=0, verbose_name='设备状态')),
                ('admin', models.CharField(blank=True, max_length=32, null=True, verbose_name='资产管理员')),
                ('buy_date', models.DateField(blank=True, null=True, verbose_name='购买时间')),
                ('update_date', models.DateTimeField(auto_now=True, verbose_name='最近修改时间')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('idc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.IDC', verbose_name='IDC机房')),
                ('manufactory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Manufactory', verbose_name='制造厂商')),
                ('parent_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_level', to='database.NetDevice', verbose_name='上链设备')),
            ],
            options={
                'verbose_name_plural': '网络设备',
                'verbose_name': '网络设备',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(max_length=32, verbose_name='权限描述')),
                ('code', models.CharField(max_length=64, verbose_name='url权限')),
                ('method', models.CharField(blank=True, max_length=16, null=True, verbose_name='请求方法')),
                ('kwargs', models.CharField(blank=True, max_length=128, null=True, verbose_name='其他参数')),
            ],
            options={
                'verbose_name_plural': '权限',
                'verbose_name': '权限',
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN号')),
                ('model', models.CharField(max_length=128, verbose_name='型号')),
                ('slot', models.CharField(blank=True, max_length=64, null=True, verbose_name='插槽')),
                ('capacity', models.IntegerField(verbose_name='内存大小(MB)')),
                ('update_date', models.DateTimeField(blank=True, null=True, verbose_name='更新时间')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ram', to='database.Host')),
            ],
            options={
                'verbose_name_plural': '内存',
                'verbose_name': '内存',
            },
        ),
        migrations.CreateModel(
            name='RemoteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_type', models.SmallIntegerField(choices=[(0, 'ssh-password'), (1, 'ssh-key')], default=0)),
                ('username', models.CharField(max_length=128, verbose_name='远程主机账号')),
                ('password', models.CharField(help_text='如果auth_type选择为ssh-key,那此处就应该是key的路径', max_length=256)),
            ],
            options={
                'verbose_name_plural': '远程主机账号',
                'verbose_name': '远程主机账号',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='角色名')),
                ('perm', models.ManyToManyField(to='database.Permission')),
            ],
            options={
                'verbose_name_plural': '角色',
                'verbose_name': '角色',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='服务名')),
                ('port', models.IntegerField(verbose_name='端口')),
                ('memo', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('host', models.ManyToManyField(to='database.Host')),
            ],
            options={
                'verbose_name_plural': '服务',
                'verbose_name': '服务',
            },
        ),
        migrations.CreateModel(
            name='Sql',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='sql语句')),
                ('result', models.TextField(blank=True, null=True, verbose_name='执行结果')),
            ],
            options={
                'verbose_name_plural': 'sql检查',
                'verbose_name': 'sql检查',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SmallIntegerField(choices=[(0, 'Centos'), (1, 'Window')], default=0, verbose_name='系统类型')),
                ('version', models.CharField(max_length=32, verbose_name='系统版本号')),
            ],
            options={
                'verbose_name_plural': '操作系统',
                'verbose_name': '操作系统',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.SmallIntegerField(choices=[(0, 'cmd'), (1, 'file_transfer')], verbose_name='执行类型')),
                ('task_detail', models.CharField(max_length=512, verbose_name='任务日志')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bind_hosts', models.ManyToManyField(to='database.BindHost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='堡垒机账号')),
            ],
            options={
                'verbose_name_plural': '任务',
                'verbose_name': '任务',
            },
        ),
        migrations.CreateModel(
            name='TaskDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(choices=[('Success', 'Success'), ('Failed', 'Failed'), ('Processing', 'Processing'), ('Canceled', 'Canceled')], default='Processing', max_length=32, verbose_name='执行状态')),
                ('event_log', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('bind_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.BindHost')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Task')),
            ],
            options={
                'verbose_name_plural': '任务日志',
                'verbose_name': '任务日志',
            },
        ),
        migrations.AlterUniqueTogether(
            name='remoteuser',
            unique_together=set([('auth_type', 'username', 'password')]),
        ),
        migrations.AlterUniqueTogether(
            name='permission',
            unique_together=set([('code', 'method')]),
        ),
        migrations.AlterUniqueTogether(
            name='idc',
            unique_together=set([('name', 'staff')]),
        ),
        migrations.AddField(
            model_name='host',
            name='idc',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.IDC', verbose_name='IDC机房'),
        ),
        migrations.AddField(
            model_name='host',
            name='manufactory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.Manufactory', verbose_name='制造厂商'),
        ),
        migrations.AddField(
            model_name='host',
            name='os_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.System', verbose_name='操作系统'),
        ),
        migrations.AddField(
            model_name='host',
            name='parent_host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_level', to='database.Host', verbose_name='宿主机'),
        ),
        migrations.AddField(
            model_name='disk',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disk', to='database.Host'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='host',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cpu', to='database.Host'),
        ),
        migrations.AddField(
            model_name='code',
            name='env',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Environment', verbose_name='发布环境'),
        ),
        migrations.AddField(
            model_name='code',
            name='hd_tester',
            field=models.ManyToManyField(blank=True, related_name='t', to=settings.AUTH_USER_MODEL, verbose_name='灰度测试者'),
        ),
        migrations.AddField(
            model_name='code',
            name='production_tester',
            field=models.ManyToManyField(blank=True, related_name='r', to=settings.AUTH_USER_MODEL, verbose_name='生产测试者'),
        ),
        migrations.AddField(
            model_name='code',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.BusinessUnit', verbose_name='项目名'),
        ),
        migrations.AddField(
            model_name='code',
            name='pusher',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='p', to=settings.AUTH_USER_MODEL, verbose_name='发布者'),
        ),
        migrations.AddField(
            model_name='businessunit',
            name='service',
            field=models.ManyToManyField(to='database.Service'),
        ),
        migrations.AddField(
            model_name='bindhost',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Host'),
        ),
        migrations.AddField(
            model_name='bindhost',
            name='remote_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.RemoteUser'),
        ),
        migrations.AddField(
            model_name='bindhost',
            name='user',
            field=models.ManyToManyField(blank=True, related_name='h', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='role',
            field=models.ManyToManyField(to='database.Role'),
        ),
        migrations.AlterUniqueTogether(
            name='taskdetail',
            unique_together=set([('task', 'bind_host')]),
        ),
        migrations.AlterUniqueTogether(
            name='service',
            unique_together=set([('name', 'port')]),
        ),
        migrations.AlterUniqueTogether(
            name='ram',
            unique_together=set([('host', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='disk',
            unique_together=set([('host', 'slot')]),
        ),
        migrations.AlterUniqueTogether(
            name='bindhost',
            unique_together=set([('host', 'remote_user')]),
        ),
    ]
